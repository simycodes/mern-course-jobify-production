import Job from '../models/Job.js';
import { StatusCodes } from 'http-status-codes';
import { BadRequestError, NotFoundError, UnAuthenticatedError } from '../errors/index.js';
import checkPermissions from '../utils/checkPermissions.js';
import mongoose from 'mongoose';
import moment from 'moment';

// FUNCTION TO CREATE A JOB
const createJob = async (req, res) => {
    // res.send("Create Job")
    // GET JOB DETAILS FROM THE USER
    const { position, company } = req.body;

    // VALIDATE INCOMING DATA
    if(!position || !company) {
        throw new BadRequestError("Please provide all values");
    }
    // INDICATING THAT JOB WAS CREATED BY THE USER. req.user.userId IS GENERATED BY auth MIDDLEWARE
    req.body.createdBy = req.user.userId;
    // CREATE THE NEW JOB
    const job = await Job.create(req.body);
    // SEND BACK THE RESPONSE TO THE FRONT-END
    res.status(StatusCodes.CREATED).json({ job })
}

// FUNCTION TO GET ALL JOBS
const getAllJobs = async (req, res) => {
  // GET QUERY PARAMS SENT BY THE USER
  const { search, status, jobType, sort } = req.query

  // SET UP THE QUERY OBJECT THAT WILL BE USED IN GETTING FILTERED DATA FROM THE DATABASE
  const queryObject = {
    createdBy:req.user.userId // GET ALL JOBS FOR THE LOGGED IN USER
  }
  // SEARCH FUNCTIONALITY SET BY DEVELOPER PREFERENCES
  // ADD OR CHAIN SORT/FILTER CONDITIONS TO ADD TO THE QUERY OBJECT - queryObject
  // if status is not all(which is pending etc) then add it to the query object for filtering
  // if(status !== 'pending' || status !== 'declined' || status !== 'interview') {}
  if(status && status !== 'all') { // at first status is undefined hence status && - check only if its there and valid - then get the jobs -console.log(queryObject);
    queryObject.status = status;
  }
  if(jobType && jobType !== 'all') {
    queryObject.jobType = jobType;
  }
  // SEARCH FUNCTIONALITY, SEARCHING ACCORDING TO USER ENTERED TEXT
  if(search) {
    queryObject.position = { $regex: search, $options: 'i'}
    // $regex helps match an letter character put in the search to what is in the database(position field/property)
    // i - means case insensitive, get results despite the search being in lower or upper case
  }
  // SORT FUNCTIONALITY
  // NO AWAIT - JUST GETS THE QUERY(queryObject) - JOBS WONT BE GIVEN AS AWAIT IS NOT ATTACHED
  // console.log(queryObject);
  let result = Job.find(queryObject);
  // chain sort conditions, NOTE: - is descending
  if(sort === "latest") {
    result = result.sort('-createdAt');
  }
  if(sort === "oldest") {
    result = result.sort('createdAt');
  }
  if(sort === "a-z") {
    result = result.sort('position');
  }
  if(sort === "z-a") {
    result = result.sort('-position');
  }

  // PAGINATION FUNCTIONALITY
  const page = Number(req.query.page) || 1;
  const limitNumberOfJobs = Number(req.query.limit) || 10;
  const numberOfJobsToSkip = (page - 1) * limitNumberOfJobs; // first skip 0, then 10, then 20,30,40 etc
  result = result.skip(numberOfJobsToSkip).limit(limitNumberOfJobs);

  // NOW GET ALL JOBS FOR THE LOGGED IN USER ACCORDING TO HIS FILTERING PREFERENCES-QUERY(queryObject)
  const jobs = await result;
  // GET THE ACTUAL TOTAL & PAGES AFTER ALL FILTERING,SORTING,SKIP,LIMIT & PAGINATION PROCESSES
  const totalJobs = await Job.countDocuments(queryObject);
  const numOfPages = Math.ceil(totalJobs / limitNumberOfJobs);

  res.status(StatusCodes.OK).json({ jobs, totalJobs, numOfPages });

  // BASIC APPROACH TO GET ALL JOBS FOR THE LOGGED IN USER - NO QUERY PARAMS
  // const jobs = await Job.find({createdBy:req.user.userId});
  // res.status(StatusCodes.OK).json({ jobs, totalJobs:jobs.length, numOfPages: 1 })
}

// FUNCTION TO UPDATE A JOB
const updateJob = async (req, res) => {
  const { id: jobId } = req.params;

  const { company, position } = req.body;
  if (!company || !position) {
    throw new BadRequestError('Please Provide All Values');
  }
  // CHECK IF JOB TO BE UPDATED IS IN THE DATABASE
  const job = await Job.findOne({ _id: jobId });
  if (!job) {
    throw new NotFoundError(`No job with id ${jobId}`);
  }

  // CHECK PERMISSIONS - VERIFY USER IS UPDATING OWN JOB OR USER IS ADMIN
  checkPermissions(req.user, job.createdBy);

  // UPDATE THE JOB
  const updatedJob = await Job.findOneAndUpdate({ _id: jobId }, req.body, {
    new: true,
    runValidators: true, // CHECK IF PROVIDED VALUES ARE OF THE RIGHT DATA TYPE - NOT INCLUDED PROPERTIES - CHECK ONLY SUBMITTED PROPERTIES
  });

  res.status(StatusCodes.OK).json({ updatedJob });
};

// FUNCTION TO DELETE A JOB
const deleteJob = async (req, res) => {
  const { id: jobId } = req.params;

  const job = await Job.findOne({ _id: jobId });
  if (!job) {
    throw new NotFoundError(`No job with id : ${jobId}`);
  }

  // CHECK PERMISSIONS - VERIFY USER IS DELETING OWN JOB OR USER IS ADMIN
  checkPermissions(req.user, job.createdBy);
  // DELETE ACTUAL JOB NOW
  await job.remove();
  res.status(StatusCodes.OK).json({ msg: 'Success! Job removed' });
};

// FUNCTION TO GET THE JOB STATS
const showStats = async (req, res) => {
  // FILTERING AND SORTING DOCUMENT AFTER GETTING IT FROM DB - $match=filter,$group-filter also ,more detailed
  let stats = await Job.aggregate([
    // GET ALL JOBS CREATED BY THE LOGGED USER
    // mongoose.Types.ObjectId() converts user id(a string) into a db object id
    { $match:{ createdBy:mongoose.Types.ObjectId(req.user.userId) }}, 
    // GROUP THE DOCUMENTS ACCORDING TO THE STATUS PROPERTY
    { $group: { _id: '$status', count: { $sum: 1 } } },
  ]);

  // CHANGING STATS FROM AN ARRAY OF OBJECTS TO JUST AN OBJECT AS THE OUTPUT
  // acc/total/final object, curr/each document in the array
  stats = stats.reduce((acc, curr) => {
    const { _id: title, count } = curr;
    acc[title] = count;
    return acc;
  }, {}); // , {} shows we returning an object, if 0 then we returning a number type and not an object type

  // SET UP DEFAULT STATS(as 0) INCASE STATS ARE EMPTY - EG USER JUST SIGNED UP AN ACCOUNT
  const defaultStats = {
    pending: stats.pending || 0,
    interview: stats.interview || 0,
    declined: stats.declined || 0,
  };
  // NUMBER OF APPLICATIONS IN EACH MONTH OF EVERY YEAR -FIRST FILTER THEM TO MATCH THE
  // LOGGED IN USER
  let monthlyApplications = await Job.aggregate([
    // mongoose.Types.ObjectId() converts user id(a string) into a db object id
    { $match: { createdBy: mongoose.Types.ObjectId(req.user.userId) } },
    {
      $group: {
        _id: { year: { $year: '$createdAt' }, month: { $month: '$createdAt' } },
        count: { $sum: 1 },
      },
    },
    { $sort: { '_id.year': -1, '_id.month': -1 } }, // GET LATEST 6 MONTHS NOT FIRST ENTERED/USED 6 MONTHS
    { $limit: 6 },
  ]);
  // CHANGE HOW THE DATE WILL BE SENT, FORMATTED AND SENT TO THE FRONT END - MONTH AND YEAR AND NUMBER
  monthlyApplications = monthlyApplications.map((item) => {
    // DESTRUCTURE EACH ITEM FROM DB
    const { _id: { year, month }, count,} = item;
    // MAKE A NEW DATE FORMATE FOR EASY FRONT END DISPLAY
    // moment() accepts months 0-11, hence the month-1
    const date = moment().month(month - 1).year(year).format('MMM Y');
    return { date, count };
    }).reverse(); // reverse() PUTS OLDEST MONTH AS FIRST IN THE ARRAY OF OBJECTS TO ON FRONT END WE DISPLAY OLDEST MONTH TO NEWEST MONTH

  res.status(StatusCodes.OK).json({ defaultStats, monthlyApplications });
}


export { createJob, deleteJob, getAllJobs, updateJob, showStats };